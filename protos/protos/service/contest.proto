syntax = "proto2";

package service.contest;

import "common.proto";

message AuthUserRequest {
	required string username = 1;
	required string password = 2;
}
message AuthUserResponse {
	message Success {
		required string username = 1;
		required string fullname = 2;
	}
	message Failure {
		required string error = 1;
	}
	oneof response {
		Success success = 1;
		Failure failure = 2;
	}
}

message ContestMetadata {
	required string name = 1;
	required string description = 2;
	optional common.Timestamp start_time = 3;
	optional common.Timestamp end_time = 4;
}
message GetContestMetadataRequest {}
message GetContestMetadataResponse {
	required ContestMetadata metadata = 1;
}

message Problem {
	required uint64 id = 1;
	required string name = 2;
	required string long_name = 3;
}
message GetProblemRequest {
	required uint64 problem_id = 1;
}
message GetProblemInfoResponse {
 	required Problem info = 1;
}

message GetProblemStatementResponse {
	required bytes statement = 2;
}

message Message { // questions and announcements are the same
	required uint64 id = 1;
	required string subject = 2;
	optional uint64 problem_id = 3;
	required string text = 4;
	optional string from = 5;
	optional string to = 6;
	required common.Timestamp sent_at = 7;
}
message GetAnnouncementListRequest {
	optional uint64 problem_id = 1;
}
message GetAnnouncementListResponse {
	repeated Message announcements = 1;
}

message GetQuestionListRequest {
	optional uint64 problem_id = 1;
	optional uint64 user_id = 2;
}
message GetQuestionListResponse {
	repeated Message questions = 1;
}


message SetUserRequest {
	required string username = 1;
	required string fullname = 2;
	required string password = 3;
}
message SetUserResponse {
	enum Code {
		ADD = 0;
		UPDATE = 1;
	}
	required Code code = 1;
}

message SetContestMetadataRequest {
	required ContestMetadata metadata = 1;
}
message SetContestMetadataResponse {}

message SetProblemRequest {
	required Problem info = 1;
 	required bytes statement = 2;
}
message SetProblemResponse {}

message AddMessageRequest {
	required Message message = 1;
}
message AddMessageResponse {}

service Contest {
	rpc auth_user(AuthUserRequest) returns (AuthUserResponse);
	rpc get_contest_metadata(GetContestMetadataRequest) returns (GetContestMetadataResponse);
	rpc get_problem_info(GetProblemRequest) returns (GetProblemInfoResponse);
	rpc get_problem_statement(GetProblemRequest) returns (GetProblemStatementResponse);
	rpc get_announcement_list(GetAnnouncementListRequest) returns (GetAnnouncementListResponse);
	rpc get_question_list(GetQuestionListRequest) returns (GetQuestionListResponse);

	rpc set_user(SetUserRequest) returns (SetUserResponse);
	rpc set_contest_metadata(SetContestMetadataRequest) returns (SetContestMetadataResponse);
	rpc set_problem(SetProblemRequest) returns (SetProblemResponse);
	rpc add_message(AddMessageRequest) returns (AddMessageResponse);
}
