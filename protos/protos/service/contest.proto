syntax = "proto3";

package service.contest;

import "user.proto";

message AuthUserRequest {
	string username = 1;
	string password = 2;
}
message AuthUserResponse {
	message Success {
		string username = 1;
		string fullname = 2;
	}
	message Failure {
		string error = 1;
	}
	oneof response {
		Success success = 1;
		Failure failure = 2;
	}
}

message GetContestRequest {}
message GetContestResponse {
	user.Contest info = 1;
}

message GetProblemRequest {
	uint32 problem_id = 1;
}
message GetProblemResponse {
 	user.Problem info = 1;
	bytes statement = 2;
}

message GetAnnouncementListRequest {
	optional uint32 problem_id = 1;
}
message GetAnnouncementListResponse {
	repeated user.Message announcements = 1;
}

message GetQuestionListRequest {
	optional uint32 problem_id = 1;
	optional uint32 user_id = 2;
}
message GetQuestionListResponse {
	repeated user.Message questions = 1;
}


message SetUserRequest {
	string username = 1;
	string fullname = 2;
	string password = 3;
}
message SetUserResponse {
	enum Code {
		ADD = 0;
		UPDATE = 1;
	}
	Code code = 1;
}

message SetContestRequest {
	user.Contest info = 1;
}
message SetContestResponse {}

message SetProblemRequest {
	uint32 problem_id = 1;
	optional user.Problem info = 2;
 	optional bytes statement = 3;
}
message SetProblemResponse {}

message AddQuestionRequest {
	user.Message question = 1;
}
message AddQuestionResponse {}

message AddAnnouncementRequest {
	user.Message announcement = 1;
}
message AddAnnouncementResponse {}

service Contest {
	rpc auth_user(AuthUserRequest) returns (AuthUserResponse);
	rpc get_contest(GetContestRequest) returns (GetContestResponse);
	rpc get_problem(GetProblemRequest) returns (GetProblemResponse);
	rpc get_announcement_list(GetAnnouncementListRequest) returns (GetAnnouncementListResponse);
	rpc get_question_list(GetQuestionListRequest) returns (GetQuestionListResponse);

	rpc set_user(SetUserRequest) returns (SetUserResponse);
	rpc set_contest(SetContestRequest) returns (SetContestResponse);
	rpc set_problem(SetProblemRequest) returns (SetProblemResponse);
	rpc add_question(AddQuestionRequest) returns (AddQuestionResponse);
	rpc add_announcement(AddAnnouncementRequest) returns (AddAnnouncementResponse);
}
