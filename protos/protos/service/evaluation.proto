syntax = "proto2";

package service.evaluation;

import "common.proto";
import "scoring.proto";

// Schema-defining messages

// Problems, subtasks, testcases IO files and evaluation related files are
// stored in the filesystem using a gerarchy of nested folders.

message Subtask {
    required uint64 id = 1;
    required scoring.Subtask scoring = 2;
    repeated uint64 testcases_id = 3;
}

message Problem {  // all problem metadata, no files
    enum Type {    // maybe change into flags (eg: has interactor, has grader,
                   // normal or oo) (?)
        BATCH = 0;
        OUTPUT_ONLY = 1;
        INTERACTIVE = 2;
        OTHER = 3;
    }
    required uint64 id = 1;
    required scoring.Problem scoring = 2;
    required Type type = 3;
    required common.Resources execution_limits = 4;
    required common.Resources compilation_limits = 5;
    repeated Subtask subtasks = 6;
}

// Only for updates/creation of metedata (not actually stored)
message Contest {
    repeated Problem problems = 1;
    required scoring.User user_scoring_method = 2;
}

// Communication messages for large files (keep as few as possible)

message Testcase {
    required uint64 id = 1;
    optional bytes input = 2;
    optional bytes output = 3;
}

message EvaluationFile {
    enum Type {
        CHECKER = 0;
        INTERACTOR = 1;
    }
    required Type type = 1;
    required common.Source source = 2;
}

// RPC messages

message GetUserScoringRequest {}
message GetUserScoringResponse {
    required scoring.User method = 1;
}
message SetUserScoringRequest {
    required scoring.User method = 1;
}
message SetUserScoringResponse {}

message GetProblemRequest {
    required uint64 problem_id = 1;
}
message GetProblemResponse {
    required Problem info = 1;
}

message GetContestRequest {}
message GetContestResponse {
    required Contest info = 1;
}

message SetContestRequest {
    required Contest info = 1;
}
message SetContestResponse {}

// vv admin only vv we are gonna need to do streaming stuff for these
message GetTestcaseRequest {
    required uint64 problem_id = 1;
    required uint64 testcase_id = 2;
}
message GetTestcaseResponse {
    required Testcase testcase = 1;
}
message GetProblemTestcasesRequest {
    required uint64 problem_id = 1;
}
message GetProblemTestcasesResponse {
    repeated Testcase testcases = 1;
}
message SetTestcaseRequest {
    required uint64 problem_id = 1;
    required uint64 subtask_id = 2;
    oneof command {
        Testcase add_testcase = 3;
        Testcase update_testcase = 4;
        uint64 delete_testcase_id = 5;
    }
}
message SetTestcaseResponse {}

message GetProblemEvaluationFileRequest {
    required uint64 problem_id = 1;
    required EvaluationFile.Type type = 2;
}
message GetProblemEvaluationFileResponse {
    required EvaluationFile file = 1;
}
message SetProblemEvaluationFileRequest {
    required uint64 problem_id = 1;
    oneof command {
        EvaluationFile add_evaluation_file = 2;
        EvaluationFile update_evaluation_file = 3;
    }
}
message SetProblemEvaluationFileResponse {}

service Evaluation {
    rpc get_user_scoring(GetUserScoringRequest)
        returns (GetUserScoringResponse);
    rpc get_problem(GetProblemRequest) returns (GetProblemResponse);
    rpc get_contest(GetContestRequest) returns (GetContestResponse);
    rpc set_contest(SetContestRequest) returns (SetContestResponse);
    rpc get_testcase(GetTestcaseRequest) returns (GetTestcaseResponse);
    rpc get_problem_testcases(GetProblemTestcasesRequest)
        returns (GetProblemTestcasesResponse);
    rpc set_testcase(SetTestcaseRequest) returns (SetTestcaseResponse);
    rpc get_problem_evaluation_file(GetProblemEvaluationFileRequest)
        returns (GetProblemEvaluationFileResponse);
    rpc set_problem_evaluation_file(SetProblemEvaluationFileRequest)
        returns (SetProblemEvaluationFileResponse);
}
