syntax = "proto3";

package service.evaluation;

import "scoring.proto";
import "common.proto";

// Schema-defining messages

// Problems, subtasks, testcases IO files and evaluation related files are stored
// in the filesystem using a gerarchy of nested folders.

message Subtask {
	scoring.Subtask scoring = 2;
	repeated uint64 testcases = 3;
}

message Problem { // all problem metadata, no files
	enum Type { // maybe change into flags (eg: has interactor, has grader, normal or oo) (?)
		BATCH = 0;
		OUTPUT_ONLY = 1;
		INTERACTIVE = 2;
		OTHER = 3;
	}
	uint64 id = 1;
	scoring.Problem scoring = 2;
	Type type = 3;
	common.Resources execution_limits = 4;
	common.Resources compilation_limits = 5;
	repeated Subtask subtasks = 6;
	repeated uint64 evaluation_files = 7;
}

// Communication messages for large files (keep as few as possible)

message Testcase {
	uint64 id = 1;
	optional bytes input = 2;
	optional bytes output = 3;
}

message EvaluationFile {
	enum Type {
		GENERIC = 0;
		CHECKER = 1;
		INTERACTOR = 2;
	}
	uint64 id = 1;
	Type type = 2;
	common.Source source = 3;
}

// RPC messages

// vv sets admin only, gets admin, submission and scoreboard vv
message GetUserScoringRequest {}
message GetUserScoringResponse {
	scoring.User method = 1;
}
message SetUserScoringRequest {
	scoring.User method = 1;
}
message SetUserScoringResponse {}


message GetProblemRequest {
	uint64 problem_id = 1;
}
message GetProblemResponse {
	Problem info = 1;
}
message SetProblemRequest {
	Problem problem = 1;
}
message SetProblemResponse {}

// vv admin only vv we are gonna need to do streaming stuff for these
message GetTestcaseRequest {
	uint64 testcase_id = 1;
}
message GetTestcaseResponse {
	Testcase testcase = 1;
}
message SetTestcaseRequest {
	Testcase testcase = 1;
}
message SetTestcaseResponse {}

message GetEvaluationFileRequest {
	uint64 evaluation_file_id = 1;
}
message GetEvaluationFileResponse {
	EvaluationFile file = 1;
}
message SetEvaluationFileRequest {
	EvaluationFile file = 1;
}
message SetEvaluationFileResponse {}

// about SetThing:
// existing id = update, new id = add
// oneof { add Thing, update Thing, remove id }
// three different functions
// ?

// separate function for evaluation info only?

service Evaluation {
	rpc get_user_scoring(GetUserScoringRequest) returns (GetUserScoringResponse);
	rpc set_user_scoring(SetUserScoringRequest) returns (SetUserScoringResponse);
	rpc get_problem(GetProblemRequest) returns (GetProblemResponse);
	rpc set_problem(SetProblemRequest) returns (SetProblemResponse);
	rpc get_testcase(GetTestcaseRequest) returns (GetTestcaseResponse);
	rpc set_testcase(SetTestcaseRequest) returns (SetTestcaseResponse);
	rpc get_evaluation_file(GetEvaluationFileRequest) returns (GetEvaluationFileResponse);
	rpc set_evaluation_file(SetEvaluationFileRequest) returns (SetEvaluationFileResponse);
}

